// Generated by CoffeeScript 1.10.0
new Program("basic", ["a_VertexPosition"], ["u_MVPMatrix"], "\nattribute vec3 a_VertexPosition;\n\nuniform mat4 u_MVPMatrix;\n\nvoid main(void) {\n	gl_Position = u_MVPMatrix * vec4(a_VertexPosition, 1.0);\n}\n", "\nprecision mediump float;\n\nvoid main(void) {\n	gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n", function(material) {
  var i, len, primitive, ref, results;
  ref = material.instances;
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    primitive = ref[i];
    GL.uniformMatrix4fv(this.uniform.u_MVPMatrix, false, mat4.multiply(mat4.create(), gfx.matVP, primitive.modelMatrix()));
    GL.bindBuffer(GL.ARRAY_BUFFER, primitive.mesh.buffer);
    GL.vertexAttribPointer(this.attribute.a_VertexPosition, 3, GL.FLOAT, false, primitive.mesh.stride, primitive.mesh.vertexOffset);
    GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, primitive.mesh.elements);
    results.push(GL.drawElements(GL.TRIANGLES, primitive.mesh.vertexCount, GL.UNSIGNED_SHORT, 0));
  }
  return results;
});

new Program("color", ["a_VertexPosition"], ["u_MVPMatrix", "u_Scale", "u_Color"], "\nattribute vec3 a_VertexPosition;\n\nuniform mat4 u_MVPMatrix;\nuniform vec3 u_Scale;\n\nvoid main(void) {\n	gl_Position = u_MVPMatrix * vec4(a_VertexPosition * u_Scale, 1.0);\n}\n", "\nprecision mediump float;\n\nuniform vec4 u_Color;\n\nvoid main(void) {\n	gl_FragColor = u_Color;\n}\n", function(material) {
  var i, len, mat, primitive, ref, results;
  ref = material.instances;
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    primitive = ref[i];
    mat = mat4.multiply(mat4.create(), gfx.matVP, primitive.modelMatrix());
    GL.uniformMatrix4fv(this.uniform.u_MVPMatrix, false, mat4.multiply(mat4.create(), gfx.matVP, primitive.modelMatrix()));
    GL.uniform3f(this.uniform.u_Scale, primitive.scale, primitive.scale, primitive.scale);
    GL.uniform4fv(this.uniform.u_Color, primitive.color);
    GL.bindBuffer(GL.ARRAY_BUFFER, primitive.mesh.buffer);
    GL.vertexAttribPointer(this.attribute.a_VertexPosition, 3, GL.FLOAT, false, primitive.mesh.stride, primitive.mesh.vertexOffset);
    GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, primitive.mesh.elements);
    results.push(GL.drawElements(GL.TRIANGLES, primitive.mesh.vertexCount, GL.UNSIGNED_SHORT, 0));
  }
  return results;
});


/* Excerpt from WebGL documentation
void glVertexAttribPointer( GLuint index, size, GLenum type, false, stride, offset)
	size [1-4]: number of values per attribute. (size = 3 for a vec3)
	stride : number of values between attribute starts. (stride = 0 means tightly packed)
	offset : number of values before the first attribute. 

void uniformMatrix( GLuint index, bool transpose, float[] data)

void glDrawElements( GLenum mode, GLsizei count, GLenum type, GLvoid indices)
	mode : [POINTS, LINES or TRIANGLES]
	count : Number of Vertices
	type : Type of the values in indices [GL_UNSIGNED_BYTE or GL_UNSIGNED_SHORT]
 */
